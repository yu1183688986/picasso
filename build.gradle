buildscript {
  ext.versions = [
    'compileSdk': 28,
    'minSdk': 14,
    'targetSdk': 28,
    'sourceCompatibility': JavaVersion.VERSION_1_7,
    'targetCompatibility': JavaVersion.VERSION_1_7,
    'okhttp': '3.11.0',
    'supportLibrary': '28.0.0-alpha3'
  ]

  ext.deps = [
    androidPlugin: 'com.android.tools.build:gradle:3.2.0-beta05',
    okhttp: "com.squareup.okhttp3:okhttp:${versions.okhttp}",
    mockWebServer: "com.squareup.okhttp3:mockwebserver:${versions.okhttp}",
    pollexor: 'com.squareup:pollexor:2.0.4',
    supportCompat: "com.android.support:support-compat:${versions.supportLibrary}",
    supportFragment: "com.android.support:support-fragment:${versions.supportLibrary}",
    supportAnnotations: "com.android.support:support-annotations:${versions.supportLibrary}",
    supportExifInterface: "com.android.support:exifinterface:${versions.supportLibrary}",
    archLifecycle: 'android.arch.lifecycle:common:1.1.1',
    errorProne: 'com.google.errorprone:error_prone_core:2.3.1',
    junit: 'junit:junit:4.12',
    truth: 'com.google.truth:truth:0.42',
    robolectric: 'org.robolectric:robolectric:4.0-alpha-2',
    mockito: 'org.mockito:mockito-core:2.19.0'
  ]

  ext.isCi = "true" == System.getenv('CI')

  repositories {
    google()
    maven { url 'https://plugins.gradle.org/m2/' }
  }

  dependencies {
    classpath deps.androidPlugin
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16'
  }
}

apply plugin: 'com.github.ben-manes.versions'

subprojects {
  repositories {
    google()
    jcenter()
  }

  tasks.withType(JavaCompile) {
    options.compilerArgs += [
        '-Xep:UnnecessaryDefaultInEnumSwitch:ERROR',
        '-Xep:TypeParameterUnusedInFormals:ERROR',
        '-Xep:OperatorPrecedence:ERROR',
        '-Xep:ReferenceEquality:ERROR',
        '-Xep:FloatingPointLiteralPrecision:ERROR',
        '-Xep:DateFormatConstant:ERROR',
        '-Xep:PrivateConstructorForUtilityClass:ERROR',
        '-Xep:DateFormatConstant:ERROR',
        '-XepExcludedPaths:.*/build/.*'
    ]
  }

  tasks.withType(Test) {
    testLogging {
      events "failed"
      exceptionFormat "full"
      showExceptions true
      showStackTraces true
      showCauses true
    }
  }

  plugins.apply('checkstyle')

  task('checkstyle', type: Checkstyle) {
    configFile rootProject.file('checkstyle.xml')
    source 'src/main/java'
    ignoreFailures false
    showViolations true
    include '**/*.java'

    classpath = files()
  }

  group = GROUP
  version = VERSION_NAME

  afterEvaluate {
    tasks.findByName('check').dependsOn('checkstyle')
  }

  apply plugin: 'net.ltgt.errorprone'

  dependencies {
    errorprone deps.errorProne
  }
}
